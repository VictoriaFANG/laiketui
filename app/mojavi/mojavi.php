<?php// +---------------------------------------------------------------------------+// | This file is part of the Mojavi package.                                  |// | Copyright (c) 2003, 2004 Sean Kerr.                                       |// |                                                                           |// | For the full copyright and license information, please view the LICENSE   |// | file that was distributed with this source code. You can also view the    |// | LICENSE file online at http://www.mojavi.org.                             |// +---------------------------------------------------------------------------+/** * Pre-initialization script. * * @package mojavi * * @author    Sean Kerr (skerr@mojavi.org) * @copyright (c) Sean Kerr, {@link http://www.mojavi.org} * @since     3.0.0 * @version   $Id: mojavi.php 771 2005-03-10 17:17:52Z seank $ *//** * 处理自autoload.ini中指定的类的自动加载。 * Handles autoloading of classes that have been specified in autoload.ini. * * @param string A class name. * * @return void * * @author Sean Kerr (skerr@mojavi.org) * @since  3.0.0 */function __autoload($class) {	// 这个静态变量是由下面的$ config文件生成的	// this static variable is generated by the $config file below	static $classes;	if (!isset($classes)) {		try {			// 包含autoload类列表			// include the list of autoload classes			$config = ConfigCache::checkConfig('config/autoload.ini');		} catch (MojaviException $e) {			$e -> printStackTrace();		} catch (Exception $e) {			// unknown exception			$e = new MojaviException($e -> getMessage());			$e -> printStackTrace();		}		require_once ($config);	}	if (!isset($classes[$class])) {		// unspecified class		$error = 'Autoloading of class "%s" failed';		$error = sprintf($error, $class);		$e = new AutoloadException($error);		$e -> printStackTrace();	}	// 类存在，让我们包括它	// class exists, let's include it	require_once ($classes[$class]);}try {	error_reporting(MO_ERROR_REPORTING);	// ini settings	ini_set('arg_separator.output', '&amp;');	ini_set('display_errors', 1);	ini_set('magic_quotes_runtime', 0);	ini_set('unserialize_callback_func', '__autoload');	// define a few filesystem paths(定义一些文件系统路径)	define('MO_CONFIG_DIR', MO_WEBAPP_DIR . '/config');	define('MO_LIB_DIR', MO_WEBAPP_DIR . '/lib');	define('MO_MODULE_DIR', MO_WEBAPP_DIR . '/modules');	define('MO_TEMPLATE_DIR', MO_WEBAPP_DIR . '/templates');	// required files	require_once (MO_APP_DIR . '/version.php');	// required classes for this file and ConfigCache to run	require_once (MO_APP_DIR . '/core/MojaviObject.class.php');	require_once (MO_APP_DIR . '/util/ParameterHolder.class.php');	require_once (MO_APP_DIR . '/config/ConfigCache.class.php');	require_once (MO_APP_DIR . '/config/ConfigHandler.class.php');	require_once (MO_APP_DIR . '/config/ParameterParser.class.php');	require_once (MO_APP_DIR . '/config/IniConfigHandler.class.php');	require_once (MO_APP_DIR . '/config/AutoloadConfigHandler.class.php');	require_once (MO_APP_DIR . '/config/RootConfigHandler.class.php');	require_once (MO_APP_DIR . '/exception/MojaviException.class.php');	require_once (MO_APP_DIR . '/exception/AutoloadException.class.php');	require_once (MO_APP_DIR . '/exception/CacheException.class.php');	require_once (MO_APP_DIR . '/exception/ConfigurationException.class.php');	require_once (MO_APP_DIR . '/exception/ParseException.class.php');	require_once (MO_APP_DIR . '/util/Toolkit.class.php');	// clear our cache if the conditions are right(如果条件正确，清除缓存)	if (MO_DEBUG) {		ConfigCache::clear();	}	// load base settings(负载基本设置)	ConfigCache::import('config/settings.ini');	// required classes for the framework(框架所需的类)	ConfigCache::import('config/compile.conf');} catch (MojaviException $e) {	$e -> printStackTrace();} catch (Exception $e) {	// unknown exception	$e = new MojaviException($e -> getMessage());	$e -> printStackTrace();}?>